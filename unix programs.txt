2.Write a shell script that displays list of all the files in the current directory to which the 
user has read, write and execute permissions.

echo " The files in the current dir are :"

echo " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "

 ls -l 

echo -e "\n\n Files having all permission [ r/w/x] " 

echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n" 

for file in * 

do 

 if [ -f $file ] 

 then 

 if [ -r $file -a -w $file -a -x $file ] 

 then 

 ls -l $file 

 fi 

 fi 

done


3. Write a shell script that accepts a list of file names as its arguments, count and reports the 
occurrence of each word that is present in the first argument file on other argument files.

echo "Enter the list of file names:" 
read -r fn

set $fn 

if [ "$#" -lt 2 ]; then 
  echo "Program needs at least 2 filenames" 
  exit 
fi 

for str in $(cat "$1" | tr ' ' '\n' | sort | uniq); do 
  echo -e "Words to be searched is $str" 
  echo -e "~~~~~~~~" 
  echo -e "The number of occurrence in" 
  grep -c "$str" "$@" 
done


4. Write a shell script that accepts one or more file name as arguments and converts all of 
them to uppercase, provided they exist in the current directory.

echo echo "Enter the list of file names"

read fn 

set $fn i

f [ $# -lt 1 ] 

then 

 echo "Program needs atleast 1 filename" 

 exit; 

fi 

for i in $@ 

do 

 echo -e "\n \n After converting to uppercase file $i" 

 echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 

 tr 'a-z' 'A-Z' < $i 

done


5. Write grep commands to the following:
a. To select the lines from a file that has exactly 2 characters.
b. To select the lines from a file that has more2 than one blank spaces.

echo "Enter a filename" 

read f 

echo -e "\n The content of the file is : " 

cat $f 

 echo 

echo "The lines that has exactly 2 characters"

 echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 

echo -e "`grep "^.\{2\}$" $f`" 

echo -e "\nThe lines that has more than 2 spaces" 

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 

echo -e "`grep "[[:space:]]\{2,\}" $f`" 


6. Write a shell script which accepts two file names as arguments. Compare the contents. If 
they are same, then delete the second file.

echo "enter the first file name" 

read file1 

echo "enter the second file name" 

read file2 

if [ -e $file1 -a -e $file2 -a ! -d $file1 -a ! -d $file2 ] 

then 

 cmp -s -- $file1 $file2 && rm $file2 

 if [ ! -e $file2 ] 

 then 

 echo " the two files contents are same. so $file2 is deleted" 

 else 

 echo " the two file contents are not same and $file2 not deleted" 

 fi 

else 

 echo "Input should be a regular file" 

fi

7. Write a shell script 
a. to count number of lines in a file that do not contain vowels.
echo Enter File1

read f1

if [ -f $f1 ]

then

echo "The number of lines in a file that does not contain vowels are:"

grep -v -i '[aeiou]' $f1 | wc -l

else

echo "File does not exist"

fi



7b. to count number of characters, words, lines in a given file.


echo Enter the file name:
read file
 if [ -f $file ]
then
c=`cat $file | wc -c`
c=`expr $c - 1`
w=`cat $file | wc -w`
l=`cat $file | wc -l`
echo Number of characters are: $c
echo Number of words are: $w
echo Number of Lines are: $l
else
echo file does not exist
fi



8.Write a shell script to list all the files in a given directory.

echo Enter directory name
read dir
if [ -d $dir ]
then
echo List of files in the directory are:
ls -l $dir | grep '^-'
else
echo Enter proper directory name
fi



9. Write a shell script to display list of users currently logged in.

echo Your username: $(echo $USER)
echo current date and time: $(date)
echo checking logged in Users with who command:
$whoami
echo checking logged in users with w command:
w
echo checking logged in users with id command:
$id --u
echo checking logged in users with users command
$users
echo checking logged in users with finger command
$finger

10. Write a shell script to read three text files in the current directory and merge them into a 
single file and returns a file descriptor for the new file.

echo Enter File1
read f1
echo Enter File2
read f2
echo Enter File3
read f3
exec 3> f5
cat $f1 $f2 $f3 >&3
echo The Merged File is:
cat f5
exec 3<&-

PARTB-----------------


1. Write a program to copy a file into another using system calls

#include<unistd.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main()
{
  int fd1,fd2,n;
  char buff[25];
  fd1=open("F1.txt",O_RDONLY);
  fd2=open("F2.txt",O_WRONLY|O_CREAT,0644);
  while((n=read(fd1,buff,20))!=0)
  {
     write(fd2,buff,n);
  }
  printf("Successfully copied");
  close(fd1);
  close(fd2);
}


2a.Write a program using system call: create, open, write, close, stat, fstat, lseek.

#include<unistd.h>
int main()
{
  int n;
  char buff[15];
  n=read(0,buff,15);
  write(1,buff,n);
}

2b. 

 #include<unistd.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main()
{
  int n,fd;
  char buffer[10];
  fd=open("test.txt",O_RDONLY);
  lseek(fd,-6,SEEK_END);
  n=read(fd,buffer,5);
  write(1,buffer,n);
 }

3. Write a program to create a child process and allow the parent to display “parent” and the 
child to display “child” on the screen.

#include<unistd.h>
#include<sys/types.h>
#include<stdio.h>
#include<sys/wait.h>
int main()
{
  pid_t q;
  printf("before fork\n");
  q=fork();
  if(q==0)
  {
    printf("I AM A CHILD HAVING ID %d\n",getpid());
    printf("MY PARENT'S ID IS %d\n",getppid());
  }
  else
  { 
     wait(NULL);
     printf("MY CHILD'S ID IS %d\n",q);
     printf("I AM A PARENT HAVING ID %d\n",getpid());
   }
 }

4. Write a program to create a Zombie process

#include<unistd.h>
#include<sys/types.h>
#include<stdio.h>
#include<sys/wait.h>
int main()
{
  pid_t q;
  printf("before fork\n");
  q=fork();
  if(q==0)
  {
     printf("I AM A CHILD HAVING ID %d\n",getpid());
     printf("MY PARENT'S ID IS %d\n",getppid());
  }
  else
  {
    sleep(3);
    printf("MY CHILD'S ID IS %d\n",q);
    printf("I AM A PARENT HAVING ID %d\n",getpid());
  }
  
}


5.Write a program to implement inter process communication using pipes.

#include<unistd.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/wait.h>
int main()
{
  int fd[2],n;
  char buffer[100];
  pid_t p;
  pipe(fd);
  fd[1];
  p=fork();
  if(p>0)
  {
    printf("Parent passing values to child\n");
    write(fd[1],"hello\n",6);
  }
  else
  {
    printf("Child printing received values\n");
    n=read(fd[0],buffer,100);
    write(1,buffer,n);
  }
}

6. Simulate the following CPU scheduling algorithms Round Robin

#include<stdio.h>
 
int main()
{
 
  int cnt,j,n,t,remain,flag=0,tq;
  int wt=0,tat=0,at[10],bt[10],rt[10];
  printf("Enter Total Process:\t ");
  scanf("%d",&n);
  remain=n;
  for(cnt=0;cnt<n;cnt++)
  {
    printf("Enter Arrival Time and Burst Time for Process Process Number %d :",cnt+1);
    scanf("%d",&at[cnt]);
    scanf("%d",&bt[cnt]);
    rt[cnt]=bt[cnt];
  }
  printf("Enter Time Quantum:\t");
  scanf("%d",&tq);
  printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
  for(t=0,cnt=0;remain!=0;)
  {
    if(rt[cnt]<=tq && rt[cnt]>0)
    {
      t+=rt[cnt];
      rt[cnt]=0;
      flag=1;
    }
    else if(rt[cnt]>0)
    {
      rt[cnt]-=tq;
      t+=tq;
    }
    if(rt[cnt]==0 && flag==1)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",cnt+1,t-at[cnt],t-at[cnt]-bt[cnt]);
      wt+=t-at[cnt]-bt[cnt];
      tat+=t-at[cnt];
      flag=0;
    }
    if(cnt==n-1)
      cnt=0;
    else if(at[cnt+1]<=t)
      cnt++;
    else
      cnt=0;
  }
  printf("\nAverage Waiting Time= %f\n",wt*1.0/n);
  printf("Avg Turnaround Time = %f",tat*1.0/n);
  
  return 0;
}

7.SJF

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int p[20], bt[20], wt[20], tat[20], i, k, n, temp;
	float wtavg, tatavg;
	
	printf("\nEnter the number of processes -- ");
	scanf("%d", &n);
	for(i=0;i<n;i++)
	{
		p[i]=i;
		printf("Enter Burst Time for Process %d -- ", i);
		scanf("%d", &bt[i]);
	}
	for(i=0;i<n;i++)
		for(k=i+1;k<n;k++)
			if(bt[i]>bt[k])
			{
				temp=bt[i];
				bt[i]=bt[k];
				bt[k]=temp;
				temp=p[i];
				p[i]=p[k];
				p[k]=temp;
			}
	wt[0] = wtavg = 0;
	tat[0] = tatavg = bt[0];
	for(i=1;i<n;i++)
	{
		wt[i] = wt[i-1] +bt[i-1];
		tat[i] = tat[i-1] +bt[i];
		wtavg = wtavg + wt[i];
		tatavg = tatavg + tat[i];
	}
	printf("\n\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");
	for(i=0;i<n;i++)
	printf("\n\t P%d \t\t %d \t\t %d \t\t %d", p[i], bt[i], wt[i], tat[i]);
	printf("\nAverage Waiting Time -- %f", wtavg/n);
	printf("\nAverage Turnaround Time -- %f", tatavg/n);
} 


8. Write a program that implements a producer-consumer system with two processes (using 
semaphores).

#include<stdio.h>

#include<stdlib.h>

int mutex = 1;

int full=0;

int empty=10,x=0;

void producer()

{

--mutex;

++full;

--empty;

x++;

printf("\n producer producer item %d",x);

++mutex;

}

void consumer()

{

--mutex;

--full;

--empty;

printf("\n consumer consumer item %d",x);

x--;

++mutex;

}

int main()

{

int n ,i;

printf("\n press 1 for producer \n press 2 for consumer \n press 3 for end");

for(i=1;i>0;i++)

{

printf("\n enter your choice");

scanf("%d",&n);

switch(n)

{

case 1: if((mutex==1)&&(empty!=0))

{

producer();

}

else

{

printf("buffer is full");

}

break;

case 2:if((mutex==1 )&& (full!=0))

{

consumer();

}

else

{

printf("buffer is empty");

}

break;

case 3:exit(0);

break;

default:printf("\n invalid choice");

}

}

}


9. Write a program that illustrates inter process communication using shared memory system 
calls.

a..#include<stdio.h>

#include<stdlib.h>

#include<unistd.h>

#include<sys/shm.h>

#include<string.h>

int main()

{

int i;

void *shared_memory;

char buff[100];

int shmid;

shmid=shmget ((key_t)2345, 1024, 0666|IPC_CREAT); 

printf("Key of shared memory is %d\n", shmid);

shared_memory=shmat (shmid, NULL, 0); 

printf("Process attached at %p\n", shared_memory); 

printf("Enter acme data to write to shared memory\n"); 

read (0, buff,100); 

strcpy(shared_memory, buff); 

 printf("You wrote: %s\n", (char *)shared_memory);

}



b..#include<stdio.h>

#include<stdlib.h>

#include<unistd.h>

#include<sys/shm.h>

#include<string.h>

int main()

{

int i;

void *shared_memory;

char buff[100];

int shmid;

shmid=shmget ((key_t)2345, 1024, 0666); 

printf("Key of shared memory is %d\n", shmid);

shared_memory=shmat (shmid, NULL, 0); 

printf("Process attached at %p\n", shared_memory); 

printf("Enter acme data to write to shared memory\n");  

 printf("You wrote: %s\n", (char *)shared_memory);

}





10. Write a program that illustrates the following:
a. Creating message queue.
b. Writing to a message queue


 #include<stdlib.h>

#include<stdio.h>

#include<string.h>

#include<unistd.h>

#include<sys/types.h>

#include<sys/ipc.h>

#include<sys/msg.h>

#define MAX_TEXT 512 

struct my_msg

{

long int msg_type; 

char some_text[MAX_TEXT];

};

int main()

{

int running= 1;

int msgid;

struct my_msg some_data;

char buffer[50]; 

msgid=msgget((key_t)14534,0666|IPC_CREAT);

if (msgid==-1) 

{

printf("Error in creating queue\n"); 

exit(0);

}

while (running)

{

printf("Enter some text:\n");

fgets (buffer, 50, stdin);

some_data.msg_type=1;

strcpy(some_data.some_text, buffer);



if (msgsnd (msgid, (void *)&some_data,MAX_TEXT, 0)==-1) 

{

printf("Mag not sent\n");

}

if(strncmp(buffer, "end", 3)==0)

{

running=0;

}

}

}


10c. Reading from a message queue

#include<stdlib.h>

#include<stdio.h>

#include<string.h>

#include<unistd.h>

#include<sys/types.h>

#include<sys/ipc.h>

#include<sys/msg.h>

struct my_msg

{

long int msg_type;

char some_text [BUFSIZ];

};

int main()

{

int running=1;

int msgid;

struct my_msg some_data;

long int msg_to_rec=0;

msgid=msgget ((key_t)14534,0666|IPC_CREAT);

while (running)

{

msgrcv (msgid, (void*)&some_data, BUFSIZ,msg_to_rec, 0);

printf("Data received:%s\n",some_data.some_text);

if(strncmp(some_data.some_text, "end", 3)==0)

{

running=0;

}

}

msgctl (msgid, IPC_RMID, 0);

}
